/**
 * Original work: Copyright (c) 2014 Sergey Skoblikov
 * Modified work: Copyright (c) 2015-2019 Dmitry Ivanov
 *
 * This file is a part of QEverCloud project and is distributed under the terms
 * of MIT license:
 * https://opensource.org/licenses/MIT
 *
 * This file was generated from Evernote Thrift API
 */

#ifndef QEVERCLOUD_GENERATED_TESTNOTESTORE_H
#define QEVERCLOUD_GENERATED_TESTNOTESTORE_H

#include "../SocketHelpers.h"
#include <QObject>

namespace qevercloud {

////////////////////////////////////////////////////////////////////////////////

class NoteStoreTester: public QObject
{
    Q_OBJECT
public:
    explicit NoteStoreTester(QObject * parent = nullptr);

private Q_SLOTS:
    void shouldExecuteGetSyncState();
    void shouldDeliverEDAMUserExceptionInGetSyncState();
    void shouldDeliverEDAMSystemExceptionInGetSyncState();
    void shouldExecuteGetFilteredSyncChunk();
    void shouldDeliverEDAMUserExceptionInGetFilteredSyncChunk();
    void shouldDeliverEDAMSystemExceptionInGetFilteredSyncChunk();
    void shouldExecuteGetLinkedNotebookSyncState();
    void shouldDeliverEDAMUserExceptionInGetLinkedNotebookSyncState();
    void shouldDeliverEDAMSystemExceptionInGetLinkedNotebookSyncState();
    void shouldDeliverEDAMNotFoundExceptionInGetLinkedNotebookSyncState();
    void shouldExecuteGetLinkedNotebookSyncChunk();
    void shouldDeliverEDAMUserExceptionInGetLinkedNotebookSyncChunk();
    void shouldDeliverEDAMSystemExceptionInGetLinkedNotebookSyncChunk();
    void shouldDeliverEDAMNotFoundExceptionInGetLinkedNotebookSyncChunk();
    void shouldExecuteListNotebooks();
    void shouldDeliverEDAMUserExceptionInListNotebooks();
    void shouldDeliverEDAMSystemExceptionInListNotebooks();
    void shouldExecuteListAccessibleBusinessNotebooks();
    void shouldDeliverEDAMUserExceptionInListAccessibleBusinessNotebooks();
    void shouldDeliverEDAMSystemExceptionInListAccessibleBusinessNotebooks();
    void shouldExecuteGetNotebook();
    void shouldDeliverEDAMUserExceptionInGetNotebook();
    void shouldDeliverEDAMSystemExceptionInGetNotebook();
    void shouldDeliverEDAMNotFoundExceptionInGetNotebook();
    void shouldExecuteGetDefaultNotebook();
    void shouldDeliverEDAMUserExceptionInGetDefaultNotebook();
    void shouldDeliverEDAMSystemExceptionInGetDefaultNotebook();
    void shouldExecuteCreateNotebook();
    void shouldDeliverEDAMUserExceptionInCreateNotebook();
    void shouldDeliverEDAMSystemExceptionInCreateNotebook();
    void shouldDeliverEDAMNotFoundExceptionInCreateNotebook();
    void shouldExecuteUpdateNotebook();
    void shouldDeliverEDAMUserExceptionInUpdateNotebook();
    void shouldDeliverEDAMSystemExceptionInUpdateNotebook();
    void shouldDeliverEDAMNotFoundExceptionInUpdateNotebook();
    void shouldExecuteExpungeNotebook();
    void shouldDeliverEDAMUserExceptionInExpungeNotebook();
    void shouldDeliverEDAMSystemExceptionInExpungeNotebook();
    void shouldDeliverEDAMNotFoundExceptionInExpungeNotebook();
    void shouldExecuteListTags();
    void shouldDeliverEDAMUserExceptionInListTags();
    void shouldDeliverEDAMSystemExceptionInListTags();
    void shouldExecuteListTagsByNotebook();
    void shouldDeliverEDAMUserExceptionInListTagsByNotebook();
    void shouldDeliverEDAMSystemExceptionInListTagsByNotebook();
    void shouldDeliverEDAMNotFoundExceptionInListTagsByNotebook();
    void shouldExecuteGetTag();
    void shouldDeliverEDAMUserExceptionInGetTag();
    void shouldDeliverEDAMSystemExceptionInGetTag();
    void shouldDeliverEDAMNotFoundExceptionInGetTag();
    void shouldExecuteCreateTag();
    void shouldDeliverEDAMUserExceptionInCreateTag();
    void shouldDeliverEDAMSystemExceptionInCreateTag();
    void shouldDeliverEDAMNotFoundExceptionInCreateTag();
    void shouldExecuteUpdateTag();
    void shouldDeliverEDAMUserExceptionInUpdateTag();
    void shouldDeliverEDAMSystemExceptionInUpdateTag();
    void shouldDeliverEDAMNotFoundExceptionInUpdateTag();
    void shouldExecuteUntagAll();
    void shouldDeliverEDAMUserExceptionInUntagAll();
    void shouldDeliverEDAMSystemExceptionInUntagAll();
    void shouldDeliverEDAMNotFoundExceptionInUntagAll();
    void shouldExecuteExpungeTag();
    void shouldDeliverEDAMUserExceptionInExpungeTag();
    void shouldDeliverEDAMSystemExceptionInExpungeTag();
    void shouldDeliverEDAMNotFoundExceptionInExpungeTag();
    void shouldExecuteListSearches();
    void shouldDeliverEDAMUserExceptionInListSearches();
    void shouldDeliverEDAMSystemExceptionInListSearches();
    void shouldExecuteGetSearch();
    void shouldDeliverEDAMUserExceptionInGetSearch();
    void shouldDeliverEDAMSystemExceptionInGetSearch();
    void shouldDeliverEDAMNotFoundExceptionInGetSearch();
    void shouldExecuteCreateSearch();
    void shouldDeliverEDAMUserExceptionInCreateSearch();
    void shouldDeliverEDAMSystemExceptionInCreateSearch();
    void shouldExecuteUpdateSearch();
    void shouldDeliverEDAMUserExceptionInUpdateSearch();
    void shouldDeliverEDAMSystemExceptionInUpdateSearch();
    void shouldDeliverEDAMNotFoundExceptionInUpdateSearch();
    void shouldExecuteExpungeSearch();
    void shouldDeliverEDAMUserExceptionInExpungeSearch();
    void shouldDeliverEDAMSystemExceptionInExpungeSearch();
    void shouldDeliverEDAMNotFoundExceptionInExpungeSearch();
    void shouldExecuteFindNoteOffset();
    void shouldDeliverEDAMUserExceptionInFindNoteOffset();
    void shouldDeliverEDAMSystemExceptionInFindNoteOffset();
    void shouldDeliverEDAMNotFoundExceptionInFindNoteOffset();
    void shouldExecuteFindNotesMetadata();
    void shouldDeliverEDAMUserExceptionInFindNotesMetadata();
    void shouldDeliverEDAMSystemExceptionInFindNotesMetadata();
    void shouldDeliverEDAMNotFoundExceptionInFindNotesMetadata();
    void shouldExecuteFindNoteCounts();
    void shouldDeliverEDAMUserExceptionInFindNoteCounts();
    void shouldDeliverEDAMSystemExceptionInFindNoteCounts();
    void shouldDeliverEDAMNotFoundExceptionInFindNoteCounts();
    void shouldExecuteGetNoteWithResultSpec();
    void shouldDeliverEDAMUserExceptionInGetNoteWithResultSpec();
    void shouldDeliverEDAMSystemExceptionInGetNoteWithResultSpec();
    void shouldDeliverEDAMNotFoundExceptionInGetNoteWithResultSpec();
    void shouldExecuteGetNote();
    void shouldDeliverEDAMUserExceptionInGetNote();
    void shouldDeliverEDAMSystemExceptionInGetNote();
    void shouldDeliverEDAMNotFoundExceptionInGetNote();
    void shouldExecuteGetNoteApplicationData();
    void shouldDeliverEDAMUserExceptionInGetNoteApplicationData();
    void shouldDeliverEDAMSystemExceptionInGetNoteApplicationData();
    void shouldDeliverEDAMNotFoundExceptionInGetNoteApplicationData();
    void shouldExecuteGetNoteApplicationDataEntry();
    void shouldDeliverEDAMUserExceptionInGetNoteApplicationDataEntry();
    void shouldDeliverEDAMSystemExceptionInGetNoteApplicationDataEntry();
    void shouldDeliverEDAMNotFoundExceptionInGetNoteApplicationDataEntry();
    void shouldExecuteSetNoteApplicationDataEntry();
    void shouldDeliverEDAMUserExceptionInSetNoteApplicationDataEntry();
    void shouldDeliverEDAMSystemExceptionInSetNoteApplicationDataEntry();
    void shouldDeliverEDAMNotFoundExceptionInSetNoteApplicationDataEntry();
    void shouldExecuteUnsetNoteApplicationDataEntry();
    void shouldDeliverEDAMUserExceptionInUnsetNoteApplicationDataEntry();
    void shouldDeliverEDAMSystemExceptionInUnsetNoteApplicationDataEntry();
    void shouldDeliverEDAMNotFoundExceptionInUnsetNoteApplicationDataEntry();
    void shouldExecuteGetNoteContent();
    void shouldDeliverEDAMUserExceptionInGetNoteContent();
    void shouldDeliverEDAMSystemExceptionInGetNoteContent();
    void shouldDeliverEDAMNotFoundExceptionInGetNoteContent();
    void shouldExecuteGetNoteSearchText();
    void shouldDeliverEDAMUserExceptionInGetNoteSearchText();
    void shouldDeliverEDAMSystemExceptionInGetNoteSearchText();
    void shouldDeliverEDAMNotFoundExceptionInGetNoteSearchText();
    void shouldExecuteGetResourceSearchText();
    void shouldDeliverEDAMUserExceptionInGetResourceSearchText();
    void shouldDeliverEDAMSystemExceptionInGetResourceSearchText();
    void shouldDeliverEDAMNotFoundExceptionInGetResourceSearchText();
    void shouldExecuteGetNoteTagNames();
    void shouldDeliverEDAMUserExceptionInGetNoteTagNames();
    void shouldDeliverEDAMSystemExceptionInGetNoteTagNames();
    void shouldDeliverEDAMNotFoundExceptionInGetNoteTagNames();
    void shouldExecuteCreateNote();
    void shouldDeliverEDAMUserExceptionInCreateNote();
    void shouldDeliverEDAMSystemExceptionInCreateNote();
    void shouldDeliverEDAMNotFoundExceptionInCreateNote();
    void shouldExecuteUpdateNote();
    void shouldDeliverEDAMUserExceptionInUpdateNote();
    void shouldDeliverEDAMSystemExceptionInUpdateNote();
    void shouldDeliverEDAMNotFoundExceptionInUpdateNote();
    void shouldExecuteDeleteNote();
    void shouldDeliverEDAMUserExceptionInDeleteNote();
    void shouldDeliverEDAMSystemExceptionInDeleteNote();
    void shouldDeliverEDAMNotFoundExceptionInDeleteNote();
    void shouldExecuteExpungeNote();
    void shouldDeliverEDAMUserExceptionInExpungeNote();
    void shouldDeliverEDAMSystemExceptionInExpungeNote();
    void shouldDeliverEDAMNotFoundExceptionInExpungeNote();
    void shouldExecuteCopyNote();
    void shouldDeliverEDAMUserExceptionInCopyNote();
    void shouldDeliverEDAMSystemExceptionInCopyNote();
    void shouldDeliverEDAMNotFoundExceptionInCopyNote();
    void shouldExecuteListNoteVersions();
    void shouldDeliverEDAMUserExceptionInListNoteVersions();
    void shouldDeliverEDAMSystemExceptionInListNoteVersions();
    void shouldDeliverEDAMNotFoundExceptionInListNoteVersions();
    void shouldExecuteGetNoteVersion();
    void shouldDeliverEDAMUserExceptionInGetNoteVersion();
    void shouldDeliverEDAMSystemExceptionInGetNoteVersion();
    void shouldDeliverEDAMNotFoundExceptionInGetNoteVersion();
    void shouldExecuteGetResource();
    void shouldDeliverEDAMUserExceptionInGetResource();
    void shouldDeliverEDAMSystemExceptionInGetResource();
    void shouldDeliverEDAMNotFoundExceptionInGetResource();
    void shouldExecuteGetResourceApplicationData();
    void shouldDeliverEDAMUserExceptionInGetResourceApplicationData();
    void shouldDeliverEDAMSystemExceptionInGetResourceApplicationData();
    void shouldDeliverEDAMNotFoundExceptionInGetResourceApplicationData();
    void shouldExecuteGetResourceApplicationDataEntry();
    void shouldDeliverEDAMUserExceptionInGetResourceApplicationDataEntry();
    void shouldDeliverEDAMSystemExceptionInGetResourceApplicationDataEntry();
    void shouldDeliverEDAMNotFoundExceptionInGetResourceApplicationDataEntry();
    void shouldExecuteSetResourceApplicationDataEntry();
    void shouldDeliverEDAMUserExceptionInSetResourceApplicationDataEntry();
    void shouldDeliverEDAMSystemExceptionInSetResourceApplicationDataEntry();
    void shouldDeliverEDAMNotFoundExceptionInSetResourceApplicationDataEntry();
    void shouldExecuteUnsetResourceApplicationDataEntry();
    void shouldDeliverEDAMUserExceptionInUnsetResourceApplicationDataEntry();
    void shouldDeliverEDAMSystemExceptionInUnsetResourceApplicationDataEntry();
    void shouldDeliverEDAMNotFoundExceptionInUnsetResourceApplicationDataEntry();
    void shouldExecuteUpdateResource();
    void shouldDeliverEDAMUserExceptionInUpdateResource();
    void shouldDeliverEDAMSystemExceptionInUpdateResource();
    void shouldDeliverEDAMNotFoundExceptionInUpdateResource();
    void shouldExecuteGetResourceData();
    void shouldDeliverEDAMUserExceptionInGetResourceData();
    void shouldDeliverEDAMSystemExceptionInGetResourceData();
    void shouldDeliverEDAMNotFoundExceptionInGetResourceData();
    void shouldExecuteGetResourceByHash();
    void shouldDeliverEDAMUserExceptionInGetResourceByHash();
    void shouldDeliverEDAMSystemExceptionInGetResourceByHash();
    void shouldDeliverEDAMNotFoundExceptionInGetResourceByHash();
    void shouldExecuteGetResourceRecognition();
    void shouldDeliverEDAMUserExceptionInGetResourceRecognition();
    void shouldDeliverEDAMSystemExceptionInGetResourceRecognition();
    void shouldDeliverEDAMNotFoundExceptionInGetResourceRecognition();
    void shouldExecuteGetResourceAlternateData();
    void shouldDeliverEDAMUserExceptionInGetResourceAlternateData();
    void shouldDeliverEDAMSystemExceptionInGetResourceAlternateData();
    void shouldDeliverEDAMNotFoundExceptionInGetResourceAlternateData();
    void shouldExecuteGetResourceAttributes();
    void shouldDeliverEDAMUserExceptionInGetResourceAttributes();
    void shouldDeliverEDAMSystemExceptionInGetResourceAttributes();
    void shouldDeliverEDAMNotFoundExceptionInGetResourceAttributes();
    void shouldExecuteGetPublicNotebook();
    void shouldDeliverEDAMSystemExceptionInGetPublicNotebook();
    void shouldDeliverEDAMNotFoundExceptionInGetPublicNotebook();
    void shouldExecuteShareNotebook();
    void shouldDeliverEDAMUserExceptionInShareNotebook();
    void shouldDeliverEDAMNotFoundExceptionInShareNotebook();
    void shouldDeliverEDAMSystemExceptionInShareNotebook();
    void shouldExecuteCreateOrUpdateNotebookShares();
    void shouldDeliverEDAMUserExceptionInCreateOrUpdateNotebookShares();
    void shouldDeliverEDAMNotFoundExceptionInCreateOrUpdateNotebookShares();
    void shouldDeliverEDAMSystemExceptionInCreateOrUpdateNotebookShares();
    void shouldDeliverEDAMInvalidContactsExceptionInCreateOrUpdateNotebookShares();
    void shouldExecuteUpdateSharedNotebook();
    void shouldDeliverEDAMUserExceptionInUpdateSharedNotebook();
    void shouldDeliverEDAMNotFoundExceptionInUpdateSharedNotebook();
    void shouldDeliverEDAMSystemExceptionInUpdateSharedNotebook();
    void shouldExecuteSetNotebookRecipientSettings();
    void shouldDeliverEDAMUserExceptionInSetNotebookRecipientSettings();
    void shouldDeliverEDAMNotFoundExceptionInSetNotebookRecipientSettings();
    void shouldDeliverEDAMSystemExceptionInSetNotebookRecipientSettings();
    void shouldExecuteListSharedNotebooks();
    void shouldDeliverEDAMUserExceptionInListSharedNotebooks();
    void shouldDeliverEDAMNotFoundExceptionInListSharedNotebooks();
    void shouldDeliverEDAMSystemExceptionInListSharedNotebooks();
    void shouldExecuteCreateLinkedNotebook();
    void shouldDeliverEDAMUserExceptionInCreateLinkedNotebook();
    void shouldDeliverEDAMNotFoundExceptionInCreateLinkedNotebook();
    void shouldDeliverEDAMSystemExceptionInCreateLinkedNotebook();
    void shouldExecuteUpdateLinkedNotebook();
    void shouldDeliverEDAMUserExceptionInUpdateLinkedNotebook();
    void shouldDeliverEDAMNotFoundExceptionInUpdateLinkedNotebook();
    void shouldDeliverEDAMSystemExceptionInUpdateLinkedNotebook();
    void shouldExecuteListLinkedNotebooks();
    void shouldDeliverEDAMUserExceptionInListLinkedNotebooks();
    void shouldDeliverEDAMNotFoundExceptionInListLinkedNotebooks();
    void shouldDeliverEDAMSystemExceptionInListLinkedNotebooks();
    void shouldExecuteExpungeLinkedNotebook();
    void shouldDeliverEDAMUserExceptionInExpungeLinkedNotebook();
    void shouldDeliverEDAMNotFoundExceptionInExpungeLinkedNotebook();
    void shouldDeliverEDAMSystemExceptionInExpungeLinkedNotebook();
    void shouldExecuteAuthenticateToSharedNotebook();
    void shouldDeliverEDAMUserExceptionInAuthenticateToSharedNotebook();
    void shouldDeliverEDAMNotFoundExceptionInAuthenticateToSharedNotebook();
    void shouldDeliverEDAMSystemExceptionInAuthenticateToSharedNotebook();
    void shouldExecuteGetSharedNotebookByAuth();
    void shouldDeliverEDAMUserExceptionInGetSharedNotebookByAuth();
    void shouldDeliverEDAMNotFoundExceptionInGetSharedNotebookByAuth();
    void shouldDeliverEDAMSystemExceptionInGetSharedNotebookByAuth();
    void shouldExecuteEmailNote();
    void shouldDeliverEDAMUserExceptionInEmailNote();
    void shouldDeliverEDAMNotFoundExceptionInEmailNote();
    void shouldDeliverEDAMSystemExceptionInEmailNote();
    void shouldExecuteShareNote();
    void shouldDeliverEDAMUserExceptionInShareNote();
    void shouldDeliverEDAMNotFoundExceptionInShareNote();
    void shouldDeliverEDAMSystemExceptionInShareNote();
    void shouldExecuteStopSharingNote();
    void shouldDeliverEDAMUserExceptionInStopSharingNote();
    void shouldDeliverEDAMNotFoundExceptionInStopSharingNote();
    void shouldDeliverEDAMSystemExceptionInStopSharingNote();
    void shouldExecuteAuthenticateToSharedNote();
    void shouldDeliverEDAMUserExceptionInAuthenticateToSharedNote();
    void shouldDeliverEDAMNotFoundExceptionInAuthenticateToSharedNote();
    void shouldDeliverEDAMSystemExceptionInAuthenticateToSharedNote();
    void shouldExecuteFindRelated();
    void shouldDeliverEDAMUserExceptionInFindRelated();
    void shouldDeliverEDAMSystemExceptionInFindRelated();
    void shouldDeliverEDAMNotFoundExceptionInFindRelated();
    void shouldExecuteUpdateNoteIfUsnMatches();
    void shouldDeliverEDAMUserExceptionInUpdateNoteIfUsnMatches();
    void shouldDeliverEDAMNotFoundExceptionInUpdateNoteIfUsnMatches();
    void shouldDeliverEDAMSystemExceptionInUpdateNoteIfUsnMatches();
    void shouldExecuteManageNotebookShares();
    void shouldDeliverEDAMUserExceptionInManageNotebookShares();
    void shouldDeliverEDAMNotFoundExceptionInManageNotebookShares();
    void shouldDeliverEDAMSystemExceptionInManageNotebookShares();
    void shouldExecuteGetNotebookShares();
    void shouldDeliverEDAMUserExceptionInGetNotebookShares();
    void shouldDeliverEDAMNotFoundExceptionInGetNotebookShares();
    void shouldDeliverEDAMSystemExceptionInGetNotebookShares();
};

} // namespace qevercloud

#endif // QEVERCLOUD_GENERATED_TESTNOTESTORE_H
